import java.io.*;
import java.util.*;

class Solution {
    
    static int numOfPathsToDest(int n) {
        // Initialize the memoization array
        int[][] memo = new int[n][n];
        for (int[] row : memo) {
            Arrays.fill(row, -1);
        }

        return numOfPathsToSquare(n - 1, n - 1, memo);
    }

    private static int numOfPathsToSquare(int i, int j, int[][] memo) {
        // Base cases
        if (i < 0 || j < 0) return 0;
        if (i < j) {
            memo[i][j] = 0;
            return 0;
        }
        if (memo[i][j] != -1) return memo[i][j];
        if (i == 0 && j == 0) {
            memo[i][j] = 1;
            return 1;
        }

        // Recursive case
        memo[i][j] = numOfPathsToSquare(i, j - 1, memo) + numOfPathsToSquare(i - 1, j, memo);
        return memo[i][j];
    }

    public static void main(String[] args) {
        // debug your code below
        System.out.println(numOfPathsToDest(5));
    }
}




import java.io.*;
import java.util.*;

class Solution {

  static int numOfPathsToDest(int n) {
    // Base case for a 1x1 grid
    if (n == 1) return 1;

    // Initialize base case for the first row
    int[] lastRow = new int[n];
    Arrays.fill(lastRow, 1);

    for (int j = 1; j < n; j++) {
      int[] currentRow = new int[n];
      for (int i = j; i < n; i++) {
        if (i == j) {
          currentRow[i] = lastRow[i];
        } else {
          currentRow[i] = currentRow[i - 1] + lastRow[i];
        }
      }
      lastRow = currentRow;
    }

    return lastRow[n - 1];
  }

  public static void main(String[] args) {
    // debug your code below
    System.out.println(numOfPathsToDest(5));
  }
}

-----------------------Matrix Spiral Copy-----------------------------------
if(inputMatrix == null || inputMatrix.length == 0) return new int[0];

    int rows = inputMatrix.length;
    int cols = inputMatrix[0].length;

    int[] result = new int[rows*cols];
    int index = 0;

    int top = 0, bottom = rows - 1;
    int left = 0, right = cols - 1;

    while(top <= bottom && left <= right){
      //Traverse top row
      for(int i = left; i <= right; i++){
        result[index++] = inputMatrix[top][i];
      }
      top++;

      //Traverse Right column
      for(int i = top; i <= bottom; i++){
        result[index++] = inputMatrix[i][right];
      }
      right--;

      //Traverse Bottom row
      if(top <= bottom){
        for(int i = right; i >= left; i--){
          result[index++] = inputMatrix[bottom][i];
        }
        bottom--;
      }

      //Traverse left column
      if(left <= right){
        for(int i = bottom; i >= top; i--){
          result[index++] = inputMatrix[i][left];
        }
        left++;
      }
    }
    return result;




















